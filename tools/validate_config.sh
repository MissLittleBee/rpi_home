#!/bin/bash
# validate_config.sh - Validate configuration and show current settings

set -e

# Get project root directory
PROJECT_ROOT="$(dirname "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)")"
# Get script directory  
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

if [ ! -f "$SCRIPT_DIR/.env" ]; then
    echo "‚ùå Configuration file (.env) not found!"
    echo "Run ./home_start.sh to set up configuration."
    exit 1
fi

# Load configuration
source "$SCRIPT_DIR/.env"

echo "=== üîç Current Configuration ==="
echo ""

echo "üì° Network Settings:"
echo "  Hostname: ${HOSTNAME:-‚ùå Not set}"
echo "  Server IP: ${SERVER_IP:-‚ùå Not set}"
echo "  VPN IP: ${VPN_IP:-‚ùå Not set}"
echo ""

echo "üîç Webshare Configuration:"
echo "  Username: ${WEBSHARE_USERNAME:-‚ùå Not set}"
if [ -n "$WEBSHARE_PASSWORD" ]; then
    echo "  Password: ‚úì Set"
else
    echo "  Password: ‚ùå Not set"
fi
echo ""

echo "üìÅ Storage Settings:"
echo "  Video Path: ${VIDEO_PATH:-‚ùå Not set}"
if [ -n "$VIDEO_PATH" ] && [ -d "$VIDEO_PATH" ]; then
    echo "    Status: ‚úì Exists"
    echo "    Permissions: $(ls -ld "$VIDEO_PATH" | awk '{print $1, $3, $4}')"
else
    echo "    Status: ‚ùå Does not exist"
fi

echo "  Image Path: ${IMAGE_PATH:-‚ùå Not set}"
if [ -n "$IMAGE_PATH" ] && [ -d "$IMAGE_PATH" ]; then
    echo "    Status: ‚úì Exists"
    echo "    Permissions: $(ls -ld "$IMAGE_PATH" | awk '{print $1, $3, $4}')"
else
    echo "    Status: ‚ùå Does not exist"
fi

echo "  Document Path: ${DOC_PATH:-‚ùå Not set}"
if [ -n "$DOC_PATH" ] && [ -d "$DOC_PATH" ]; then
    echo "    Status: ‚úì Exists"
    echo "    Permissions: $(ls -ld "$DOC_PATH" | awk '{print $1, $3, $4}')"
else
    echo "    Status: ‚ùå Does not exist"
fi

# Check media group configuration
echo "  Media Group: ${MEDIA_GROUP_NAME:-media}"
if getent group "${MEDIA_GROUP_NAME:-media}" >/dev/null 2>&1; then
    MEDIA_GID=$(getent group "${MEDIA_GROUP_NAME:-media}" | cut -d: -f3)
    echo "    Status: ‚úì Exists (GID: $MEDIA_GID)"
else
    echo "    Status: ‚ùå Does not exist"
fi
echo ""

echo "üë§ Nextcloud Settings:"
echo "  Admin Username: ${NEXTCLOUD_USER:-‚ùå Not set}"
if [ -n "$NEXTCLOUD_PASSWORD" ]; then
    echo "  Admin Password: ‚úì Set"
else
    echo "  Admin Password: ‚ùå Not set"
fi
echo ""

echo "üåç System Settings:"
echo "  Timezone: ${TIMEZONE:-‚ùå Not set}"
echo "  Current User: $(whoami) (UID: $(id -u))"
if groups | grep -q "${MEDIA_GROUP_NAME:-media}"; then
    echo "  Media Group Membership: ‚úì User is in ${MEDIA_GROUP_NAME:-media} group"
else
    echo "  Media Group Membership: ‚ö†Ô∏è  User not in ${MEDIA_GROUP_NAME:-media} group"
fi
echo ""

echo "üîó Service URLs:"
echo "  Home Assistant: https://${HOSTNAME}/"
echo "  Nextcloud: https://${HOSTNAME}/nextcloud/"  
echo "  Jellyfin: https://${HOSTNAME}/jellyfin/"
echo "  Webshare Search: https://${HOSTNAME}/ws/"
echo ""

# Validate required settings
ERRORS=0

if [ -z "$HOSTNAME" ]; then
    echo "‚ùå HOSTNAME not configured"
    ERRORS=$((ERRORS + 1))
fi

if [ -z "$SERVER_IP" ]; then
    echo "‚ùå SERVER_IP not configured"
    ERRORS=$((ERRORS + 1))
fi

if [ -z "$WEBSHARE_USERNAME" ] || [ -z "$WEBSHARE_PASSWORD" ]; then
    echo "‚ùå Webshare credentials not configured"
    ERRORS=$((ERRORS + 1))
fi

if [ -z "$VIDEO_PATH" ]; then
    echo "‚ùå VIDEO_PATH not configured"
    ERRORS=$((ERRORS + 1))
elif [ ! -d "$VIDEO_PATH" ]; then
    echo "‚ùå Video directory does not exist: $VIDEO_PATH"
    ERRORS=$((ERRORS + 1))
fi

if [ -z "$IMAGE_PATH" ]; then
    echo "‚ùå IMAGE_PATH not configured"
    ERRORS=$((ERRORS + 1))
elif [ ! -d "$IMAGE_PATH" ]; then
    echo "‚ùå Image directory does not exist: $IMAGE_PATH"
    ERRORS=$((ERRORS + 1))
fi

if [ -z "$DOC_PATH" ]; then
    echo "‚ùå DOC_PATH not configured"
    ERRORS=$((ERRORS + 1))
elif [ ! -d "$DOC_PATH" ]; then
    echo "‚ùå Document directory does not exist: $DOC_PATH"
    ERRORS=$((ERRORS + 1))
fi

# Validate media group exists
if ! getent group "${MEDIA_GROUP_NAME:-media}" >/dev/null 2>&1; then
    echo "‚ùå Media group '${MEDIA_GROUP_NAME:-media}' does not exist"
    ERRORS=$((ERRORS + 1))
fi

if [ -z "$NEXTCLOUD_USER" ]; then
    echo "‚ùå NEXTCLOUD_USER not configured"
    ERRORS=$((ERRORS + 1))
fi

if [ -z "$NEXTCLOUD_PASSWORD" ]; then
    echo "‚ùå NEXTCLOUD_PASSWORD not configured"
    ERRORS=$((ERRORS + 1))
fi

if [ $ERRORS -eq 0 ]; then
    echo "‚úÖ Configuration is valid!"
    echo ""
    echo "üöÄ Ready to deploy with: ./home_start.sh"
else
    echo ""
    echo "‚ö†Ô∏è  Found $ERRORS configuration error(s)."
    echo "Run: ./home_start.sh --reconfigure"
fi